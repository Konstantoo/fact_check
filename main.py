#!/usr/bin/env python3
"""
Telegram-–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–µ–π
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app_config import Config
from services.fact_checker_service import FactCheckerService
from services.perplexity_service import PerplexityService
from services.user_service import UserService
from services.payment_service import PaymentService
from services.deep_research_service import DeepResearchService
from utils.logger import setup_logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)

class TelegramFactCheckerBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.config = Config()
        self.config.validate()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.fact_checker_service = FactCheckerService(self.config.PERPLEXITY_API_KEY)
        self.perplexity_service = PerplexityService(self.config.PERPLEXITY_API_KEY)
        self.user_service = UserService()
        self.payment_service = PaymentService(self.config.YOOKASSA_SHOP_ID, self.config.YOOKASSA_SECRET_KEY)
        self.deep_research_service = DeepResearchService()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.config.TELEGRAM_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("promo", self.promo_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_service.register_user(user_id, username)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = self.user_service.get_user_stats(user_id)
        
        welcome_text = f"""
üîç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

{username}, —è –ø–æ–º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–∫—Ç—ã –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏.

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {user_stats['daily_requests']}/{user_stats['daily_limit']}
‚Ä¢ –í—Å–µ–≥–æ: {user_stats['total_requests']}
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {user_stats['balance']} –∑–∞–ø—Ä–æ—Å–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üì∞ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏", callback_data="analyze_article")],
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="check_fact")],
            [InlineKeyboardButton("üìä –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã", callback_data="user_stats")],
            [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data="buy_requests")],
            [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ-–∫–æ–¥", callback_data="promo_code")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üîç –ü–æ–º–æ—â—å

–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–±–æ—Ä –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—Ä–∞–∑—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ü–µ–Ω–∫—É —Ñ–∞–∫—Ç–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: –ø–∞–∫–µ—Ç—ã 10/50/100/500
‚Ä¢ –ü—Ä–æ–º–æ-–∫–æ–¥ "42" ‚Äî +5 –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–ö–æ–º–∞–Ω–¥—ã:
/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞
/promo ‚Äî –ø—Ä–æ–º–æ-–∫–æ–¥

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ 3 –∑–∞–ø—Ä–æ—Å–∞/–¥–µ–Ω—å
‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã ‚Äî –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def promo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /promo"""
        await self.show_promo_code_input(update, context)
    
    async def show_promo_code_input(self, update_or_query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ-–∫–æ–¥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if hasattr(update_or_query, 'effective_user'):
            user_id = update_or_query.effective_user.id
        else:
            # –≠—Ç–æ CallbackQuery
            user_id = update_or_query.from_user.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞
        context.user_data['waiting_promo_code'] = True
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if hasattr(update_or_query, 'message'):
            # –≠—Ç–æ Update
            await update_or_query.message.reply_text(
                "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ-–∫–æ–¥\n\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–æ-–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            # –≠—Ç–æ CallbackQuery
            await update_or_query.message.reply_text(
                "üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ-–∫–æ–¥\n\n–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–æ-–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text[:100]}...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–º–æ-–∫–æ–¥
            if context.user_data.get('waiting_promo_code'):
                await self.handle_promo_code(update, context)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            mode = context.user_data.get('mode')
            
            if mode == 'analyze_article':
                await self.handle_article_analysis(update, context)
            elif mode == 'check_fact':
                await self.handle_fact_check(update, context)
            elif message_text.startswith('http'):
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
                await self.handle_article_analysis(update, context)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await self.show_main_menu(update, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    
    async def handle_promo_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ-–∫–æ–¥–∞"""
        user_id = update.effective_user.id
        promo_code = update.message.text.strip()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['waiting_promo_code'] = False
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ-–∫–æ–¥
        result = self.user_service.apply_promo_code(user_id, promo_code)
        
        if result['success']:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_stats = self.user_service.get_user_stats(user_id)
            
            await update.message.reply_text(
                f"üéâ –ü—Ä–æ–º–æ-–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {result['added_requests']}\n"
                f"üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_stats['balance']} –∑–∞–ø—Ä–æ—Å–æ–≤",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]]),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞\n\n{result['message']}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]]),
                parse_mode='Markdown'
            )
    
    async def handle_article_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç—å–∏"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not self.user_service.check_daily_limit(user_id):
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                "–ö—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data="buy_requests"),
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]]),
                parse_mode='Markdown'
            )
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        context.user_data['mode'] = None
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loading_message = await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞—Ç—å—é...")
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message_text[:100]}...")
            logger.info(f"–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{message_text}'")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é
            if message_text.startswith('http'):
                # –≠—Ç–æ —Å—Å—ã–ª–∫–∞
                logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ Perplexity API: '{message_text}'")
                analysis = await self.perplexity_service.analyze_article(message_text)
                logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {str(analysis)[:200]}...")
            else:
                # –≠—Ç–æ —Ç–µ–∫—Å—Ç
                logger.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Perplexity API...")
                analysis = await self.perplexity_service.analyze_text(message_text)
                logger.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {str(analysis)[:200]}...")
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            self.user_service.make_request(user_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await loading_message.delete()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Deep Research
            context.user_data['last_topic'] = message_text
            context.user_data['last_analysis'] = analysis
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            from utils.response_formatter import ResponseFormatter
            formatter = ResponseFormatter()
            formatted_analysis = formatter.format_analysis(analysis)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(formatted_analysis) > 4000:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                parts = [formatted_analysis[i:i+4000] for i in range(0, len(formatted_analysis), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await update.message.reply_text(part, parse_mode='Markdown')
                    else:
                        await update.message.reply_text(part, parse_mode='Markdown')
            else:
                await update.message.reply_text(formatted_analysis, parse_mode='Markdown')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            user_stats = self.user_service.get_user_stats(user_id)
            is_free = self.user_service.can_use_deep_research(user_id)
            deep_research_text = "üî¨ Deep Research (–ë–ï–°–ü–õ–ê–¢–ù–û!)" if is_free else "üî¨ Deep Research (449‚ÇΩ)"
            
            keyboard = [
                [InlineKeyboardButton(deep_research_text, callback_data="deep_research")],
                [InlineKeyboardButton("üì∞ –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—å–∏", callback_data="analyze_article")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –æ Deep Research
            explanation_text = "–ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n"
            if is_free:
                explanation_text += "üî¨ Deep Research ‚Äî —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n"
                explanation_text += "‚úÖ –û–¥–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, –¥–∞–ª–µ–µ 449‚ÇΩ –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
            else:
                explanation_text += "üî¨ Deep Research ‚Äî —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏\n"
                explanation_text += "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 449‚ÇΩ –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
            
            await update.message.reply_text(
                explanation_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç—å–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    
    async def handle_fact_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–∞"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if not self.user_service.check_daily_limit(user_id):
            await update.message.reply_text(
                "‚ùå **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n"
                "–ö—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data="buy_requests"),
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]]),
                parse_mode='Markdown'
            )
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
        context.user_data['mode'] = None
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loading_message = await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–∫—Ç...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç
            fact_check = await self.fact_checker_service.check_fact(message_text)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            self.user_service.make_request(user_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            await loading_message.delete()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            from utils.response_formatter import ResponseFormatter
            formatter = ResponseFormatter()
            formatted_fact_check = formatter.format_fact_check(fact_check)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Deep Research –ø–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            context.user_data['last_topic'] = f"–§–∞–∫—Ç-—á–µ–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {message_text[:200]}"
            context.user_data['last_analysis'] = formatted_fact_check
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(formatted_fact_check) > 4000:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                parts = [formatted_fact_check[i:i+4000] for i in range(0, len(formatted_fact_check), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await update.message.reply_text(part, parse_mode='Markdown')
                    else:
                        await update.message.reply_text(part, parse_mode='Markdown')
            else:
                await update.message.reply_text(formatted_fact_check, parse_mode='Markdown')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å Deep Research)
            is_free = self.user_service.can_use_deep_research(user_id)
            deep_research_text = "üî¨ Deep Research (–ë–ï–°–ü–õ–ê–¢–ù–û!)" if is_free else "üî¨ Deep Research (449‚ÇΩ)"
            keyboard = [
                [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", callback_data="check_fact")],
                [InlineKeyboardButton(deep_research_text, callback_data="deep_research")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "**–ß—Ç–æ –¥–∞–ª—å—à–µ?**",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–∫—Ç–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if data == "analyze_article":
            await self.start_article_analysis(query, context)
        elif data == "check_fact":
            await self.start_fact_check(query, context)
        elif data == "user_stats":
            await self.show_user_stats(query, context)
        elif data == "buy_requests":
            await self.show_payment_options(query, context)
        elif data == "promo_code":
            await self.show_promo_code_input(query, context)
        elif data == "help":
            await self.show_help(query, context)
        elif data == "main_menu":
            await self.show_main_menu(query, context)
        elif data == "deep_research":
            await self.handle_deep_research(query, context)
        elif data == "confirm_deep_research":
            await self.confirm_deep_research(query, context)
        elif data.startswith("buy_"):
            await self.handle_payment_selection(query, context, data)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def start_article_analysis(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏"""
        context.user_data['mode'] = 'analyze_article'
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì∞ **–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:\n"
            "‚Ä¢ –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
            "‚Ä¢ –í–µ—Ä–Ω—ã–µ –∏ —Å–ø–æ—Ä–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –û–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–∞—á–∏",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def start_fact_check(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∞–∫—Ç–∞"""
        context.user_data['mode'] = 'check_fact'
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n"
            "–Ø –ø—Ä–æ–≤–µ—Ä—é:\n"
            "‚Ä¢ –ò—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞\n"
            "‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–≥–æ–≤–æ—Ä–∫–∏",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_user_stats(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        user_stats = self.user_service.get_user_stats(user_id)
        
        stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

**–ó–∞–ø—Ä–æ—Å—ã —Å–µ–≥–æ–¥–Ω—è:**
{user_stats['daily_requests']}/{user_stats['daily_limit']}

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üí≥ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {user_stats['total_requests']}
üí∞ –ë–∞–ª–∞–Ω—Å: {user_stats['balance']} –∑–∞–ø—Ä–æ—Å–æ–≤

**–õ–∏–º–∏—Ç—ã:**
üìÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {user_stats['daily_limit']} –∑–∞–ø—Ä–æ—Å–æ–≤
üîÑ –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞: –∑–∞–≤—Ç—Ä–∞ –≤ 00:00
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_payment_options(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã"""
        prices = {
            "buy_10": {"price": 100, "requests": 10},
            "buy_50": {"price": 400, "requests": 50},
            "buy_100": {"price": 700, "requests": 100},
            "buy_500": {"price": 3000, "requests": 500}
        }
        
        keyboard = []
        for key, value in prices.items():
            keyboard.append([
                InlineKeyboardButton(
                    f"üí≥ {value['requests']} –∑–∞–ø—Ä–æ—Å–æ–≤ - {value['price']}‚ÇΩ",
                    callback_data=key
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üí≥ **–ü–æ–∫—É–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_payment_selection(self, query, context: ContextTypes.DEFAULT_TYPE, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        prices = {
            "buy_10": {"price": 100, "requests": 10},
            "buy_50": {"price": 400, "requests": 50},
            "buy_100": {"price": 700, "requests": 100},
            "buy_500": {"price": 3000, "requests": 500}
        }
        
        if data not in prices:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            return
        
        user_id = query.from_user.id
        price_info = prices[data]
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = await self.payment_service.create_payment(
                user_id=user_id,
                amount=price_info['price'],
                description=f"–ü–æ–∫—É–ø–∫–∞ {price_info['requests']} –∑–∞–ø—Ä–æ—Å–æ–≤"
            )
            
            if payment:
                keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"üí≥ **–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω**\n\n"
                    f"–°—É–º–º–∞: {price_info['price']}‚ÇΩ\n"
                    f"–ó–∞–ø—Ä–æ—Å–æ–≤: {price_info['requests']}\n\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment['confirmation_url']}\n\n"
                    f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É.",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]])
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    
    async def show_help(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üîç **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

üì∞ **–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
‚Ä¢ –£–∑–Ω–∞–π—Ç–µ –æ –≤–µ—Ä–Ω—ã—Ö –∏ —Å–ø–æ—Ä–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è—Ö

üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
‚Ä¢ –£–∑–Ω–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –Ω–∞—É—á–Ω–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**

üí≥ **–ü–æ–∫—É–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤**
‚Ä¢ –†–∞—Å—à–∏—Ä—å—Ç–µ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã –ø–∞–∫–µ—Ç—ã –Ω–∞ 10, 50, 100, 500 –∑–∞–ø—Ä–æ—Å–æ–≤

üéÅ **–ü—Ä–æ–º–æ-–∫–æ–¥—ã**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ-–∫–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ö–æ–¥ "42" –¥–∞–µ—Ç 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥–µ–Ω—å
‚Ä¢ –ü–ª–∞—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: –±–µ–∑ –¥–Ω–µ–≤–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def show_main_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user_id = query.from_user.id
        username = query.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = self.user_service.get_user_stats(user_id)
        
        welcome_text = f"""
üîç **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–ü—Ä–∏–≤–µ—Ç, {username}!

**–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üìä –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_stats['daily_requests']}/{user_stats['daily_limit']}
üí≥ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {user_stats['total_requests']}
üí∞ –ë–∞–ª–∞–Ω—Å: {user_stats['balance']} –∑–∞–ø—Ä–æ—Å–æ–≤

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
        """
        
        keyboard = [
            [InlineKeyboardButton("üì∞ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏", callback_data="analyze_article")],
            [InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", callback_data="check_fact")],
            [InlineKeyboardButton("üìä –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã", callback_data="user_stats")],
            [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data="buy_requests")],
            [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ-–∫–æ–¥", callback_data="promo_code")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_deep_research(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ Deep Research"""
        user_id = query.from_user.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–º–µ—é—â–∏–π—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç
        try:
            logger.info(f"Deep Research user_data keys: {list(context.user_data.keys())}")
        except Exception:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Deep Research
        if not context.user_data.get('last_analysis'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            fallback_topic = context.user_data.get('last_topic')
            if fallback_topic:
                context.user_data['last_analysis'] = (
                    f"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                    f"–¢–µ–º–∞: {fallback_topic}. –ü—Ä–æ–≤–µ–¥–∏ —É–≥–ª—É–±–ª—ë–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ, \n"
                    f"–Ω–∞–π–¥–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –º–Ω–µ–Ω–∏—è."
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Deep Research. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup([[ 
                        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]])
                )
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Deep Research
        if not self.user_service.can_use_deep_research(user_id):
            user_stats = self.user_service.get_user_stats(user_id)
            if user_stats['balance'] < 449:
                await query.edit_message_text(
                    "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Deep Research**\n\n"
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è: 449 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                    f"–£ –≤–∞—Å: {user_stats['balance']} –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                    "–ö—É–ø–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", callback_data="buy_requests"),
                        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]]),
                    parse_mode='Markdown'
                )
                return
            else:
                # –°–ø–∏—Å—ã–≤–∞–µ–º 449 –∑–∞–ø—Ä–æ—Å–æ–≤
                self.user_service.make_request(user_id, 449)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        is_free = self.user_service.can_use_deep_research(user_id)
        cost_text = "–ë–ï–°–ü–õ–ê–¢–ù–û" if is_free else "449 –∑–∞–ø—Ä–æ—Å–æ–≤"
        button_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (–ë–ï–°–ü–õ–ê–¢–ù–û)" if is_free else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (449‚ÇΩ)"
        
        keyboard = [
            [InlineKeyboardButton(button_text, callback_data="confirm_deep_research")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üî¨ **Deep Research**\n\n"
            "–ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º:\n\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤\n"
            "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
            "‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞\n"
            "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –≤—ã–≤–æ–¥—ã\n\n"
            f"**–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost_text}**\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def confirm_deep_research(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ Deep Research"""
        user_id = query.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Deep Research
            is_free = self.user_service.can_use_deep_research(user_id)
            
            if not is_free:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                user_stats = self.user_service.get_user_stats(user_id)
                if user_stats['balance'] < 449:
                    await query.edit_message_text(
                        "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Deep Research",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        ]])
                    )
                    return
                # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
                self.user_service.make_request(user_id, cost=449)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
            await query.edit_message_text(
                "üî¨ –ó–∞–ø—É—Å–∫–∞—é –ì–ª—É–±–æ–∫–æ–µ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...\n\n"
                "‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 3-4 –º–∏–Ω—É—Ç—ã\n"
                "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Ç–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...\n\n"
                "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            
            # –ü—Ä–æ–≤–æ–¥–∏–º Deep Research
            topic = context.user_data.get('last_topic')
            initial_analysis = context.user_data.get('last_analysis')
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º Deep Research –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"–¢–µ–º–∞: {topic}")
            logger.info(f"–ù–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {initial_analysis[:100]}...")
            
            import time
            start_time = time.time()
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è Deep Research
                deep_research_task = asyncio.create_task(
                    self.deep_research_service.conduct_deep_research(topic, initial_analysis)
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                status_messages = [
                    "üîç –ò—â—É –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...",
                    "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –º–Ω–µ–Ω–∏—è...",
                    "üìà –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...",
                    "üåç –ü—Ä–æ–≤–µ—Ä—è—é –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...",
                    "‚öñÔ∏è –ò—â—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è...",
                    "üéØ –§–æ—Ä–º–∏—Ä—É—é –∑–∞–∫–ª—é—á–µ–Ω–∏–µ..."
                ]
                
                message_index = 0
                while not deep_research_task.done():
                    await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    if not deep_research_task.done() and message_index < len(status_messages):
                        await query.edit_message_text(
                            f"üî¨ –ì–ª—É–±–æ–∫–æ–µ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...\n\n"
                            f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(time.time() - start_time)} —Å–µ–∫—É–Ω–¥\n"
                            f"üìä {status_messages[message_index]}\n\n"
                            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                        )
                        message_index += 1
                
                deep_research_result = await deep_research_task
                end_time = time.time()
                duration = int(end_time - start_time)
                
                logger.info(f"Deep Research –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration} —Å–µ–∫—É–Ω–¥")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ Deep Research: {str(e)}")
                await query.edit_message_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ Deep Research**\n\n"
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                return
            
            # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Deep Research
            self.user_service.use_deep_research(user_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
            from utils.response_formatter import ResponseFormatter
            formatter = ResponseFormatter()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            header = f"üî¨ **DEEP RESEARCH –ó–ê–í–ï–†–®–ï–ù**\n\n"
            header += f"‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {duration} —Å–µ–∫—É–Ω–¥\n"
            header += f"üß† **–ú–æ–¥–µ–ª—å:** Perplexity Sonar (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)\n"
            header += f"üìä **–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:** —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n\n"
            header += "---\n\n"
            
            formatted_result = header + formatter.format_deep_research(deep_research_result)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(formatted_result) > 4000:
                parts = [formatted_result[i:i+4000] for i in range(0, len(formatted_result), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await query.edit_message_text(part, parse_mode='Markdown')
                    else:
                        await query.message.reply_text(part, parse_mode='Markdown')
            else:
                await query.edit_message_text(formatted_result, parse_mode='Markdown')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ Deep Research
            keyboard = [
                [InlineKeyboardButton("üì∞ –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—å–∏", callback_data="analyze_article")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(
                "**–ß—Ç–æ –¥–∞–ª—å—à–µ?**",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ Deep Research: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ Deep Research. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å polling
            try:
                import asyncio as _asyncio
                _asyncio.run(self.application.bot.delete_webhook(drop_pending_updates=True))
                logger.info("Webhook —É–¥–∞–ª–µ–Ω (drop_pending_updates=True)")
            except Exception as e_w:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e_w}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –ø–æ–¥–≤–∏—Å—à–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 409 Conflict
            self.application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = TelegramFactCheckerBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
