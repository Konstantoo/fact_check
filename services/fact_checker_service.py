import aiohttp
from typing import Optional
from loguru import logger

class FactCheckerService:
    def __init__(self, api_key: str) -> None:
        self.api_key = api_key
        self.base_url = "https://api.perplexity.ai/chat/completions"

    async def check_fact(self, statement: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç —Å –ø–æ–º–æ—â—å—é Perplexity API"""
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç: {statement}")
        
        messages = [
            {
                "role": "system",
                "content": """–¢—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ñ–∞–∫—Ç-—á–µ–∫–µ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –¥–∞—Ç—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç:
1. üìã –ö–†–ê–¢–ö–ò–ô –í–´–í–û–î - –∏—Å—Ç–∏–Ω–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–∏—Å—Ç–∏–Ω–Ω–æ/–ª–æ–∂–Ω–æ/—á–∞—Å—Ç–∏—á–Ω–æ –∏—Å—Ç–∏–Ω–Ω–æ)
2. üîç –ü–†–û–í–ï–†–ö–ê –§–ê–ö–¢–û–í - —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, —á—Ç–æ –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–æ
3. üìö –ò–°–¢–û–ß–ù–ò–ö–ò –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò - 3-5 –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å —Å—Å—ã–ª–∫–∞–º–∏
4. ‚ö†Ô∏è –ö–û–ù–¢–ï–ö–°–¢ - –≤–∞–∂–Ω—ã–µ –æ–≥–æ–≤–æ—Ä–∫–∏ –∏ –Ω—é–∞–Ω—Å—ã
5. üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò - –∫–∞–∫ —á–∏—Ç–∞—Ç–µ–ª—é –ª—É—á—à–µ –æ—Ü–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–í–ê–ñ–ù–û:
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
- –§–æ—Ä–º–∞—Ç —Å—Å—ã–ª–æ–∫: [–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞](URL)
- –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω—ã–º"""
            },
            {
                "role": "user",
                "content": f"–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {statement}"
            }
        ]
        
        payload = {
            "model": "sonar",
            "messages": messages,
            "max_tokens": 2000,
            "temperature": 0.3,
            "stream": False
        }
        
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.base_url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        result = data['choices'][0]['message']['content']
                        logger.info(f"–§–∞–∫—Ç-—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—É—á–µ–Ω–æ {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return result
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ API —Ñ–∞–∫—Ç-—á–µ–∫–∞: {response.status} - {error_text}")
                        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–∫—Ç–∞: {response.status}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–∫—Ç–∞: {str(e)}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–∫—Ç–∞: {str(e)}"
